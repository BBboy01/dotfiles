#!/usr/bin/env bash

# ###########################################################
# Setup system setting
# ###########################################################
### System
# Auto hide the menubar
defaults write -g _HIHideMenuBar -bool true
# Enable full keyboard access for all controls
defaults write -g AppleKeyboardUIMode -int 3
# Enable press-and-hold repeating
defaults write -g ApplePressAndHoldEnabled -bool false
defaults write -g InitialKeyRepeat -int 10
defaults write -g KeyRepeat -int 1
# Disable "Natural" scrolling
defaults write -g com.apple.swipescrolldirection -bool false
# Disable smart dash/period/quote substitutions
defaults write -g NSAutomaticDashSubstitutionEnabled -bool false
defaults write -g NSAutomaticPeriodSubstitutionEnabled -bool false
defaults write -g NSAutomaticQuoteSubstitutionEnabled -bool false
# Disable automatic capitalization
defaults write -g NSAutomaticCapitalizationEnabled -bool false
# Using expanded "save panel" by default
defaults write -g NSNavPanelExpandedStateForSaveMode -bool true
defaults write -g NSNavPanelExpandedStateForSaveMode2 -bool true
# Save to disk (not to iCloud) by default
defaults write -g NSDocumentSaveNewDocumentsToCloud -bool true
# Prefer tabs when opening documents
defaults write -g AppleWindowTabbingMode -string always

### Dock
# Set icon size and dock orientation
defaults write com.apple.dock tilesize -int 48
defaults write com.apple.dock orientation -string bottom
# Set dock to auto-hide
defaults write com.apple.dock autohide -bool true
# Disable to show recents, and light-dot of running apps
defaults write com.apple.dock show-recents -bool false
defaults write com.apple.dock show-process-indicators -bool false

### Finder
# Allow quitting via âŒ˜Q
defaults write com.apple.finder QuitMenuItem -bool true
# Disable warning when changing a file extension
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
# Show all files and their extensions
defaults write com.apple.finder AppleShowAllExtensions -bool true
defaults write com.apple.finder AppleShowAllFiles -bool true
# Show path bar, and layout as multi-column
defaults write com.apple.finder ShowPathbar -bool true
defaults write com.apple.finder FXPreferredViewStyle -string clmv
# Search in current folder by default
defaults write com.apple.finder FXDefaultSearchScope -string SCcf
# Keep the desktop clean
defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false
defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false
defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false
defaults write com.apple.finder ShowMountedServersOnDesktop -bool false
# New window use the $HOME path
defaults write com.apple.finder NewWindowTarget -string PfHm
defaults write com.apple.finder NewWindowTargetPath -string "file://$HOME/"
# Allow text selection in Quick Look
defaults write com.apple.finder QLEnableTextSelection -bool true
# Show metadata info, but not preview in info panel
defaults write com.apple.finder FXInfoPanesExpanded -dict MetaData -bool true Preview -bool false

### Trackpad
# Enable trackpad tap to click
defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true

### Others
# Disable quarantine for downloaded apps
defaults write com.apple.LaunchServices LSQuarantine -bool false
# Avoid creating .DS_Store files on USB or network volumes
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
# Disable crash reporter
defaults write com.apple.CrashReporter DialogType -string none
# Disable disk image verification
defaults write com.apple.frameworks.diskimages skip-verify -bool true
defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true
# Disable personalized advertising
defaults write com.apple.AdLib forceLimitAdTracking -bool true
defaults write com.apple.AdLib allowApplePersonalizedAdvertising -bool false
defaults write com.apple.AdLib allowIdentifierForAdvertising -bool false

# Allow open applications from any source
sudo spctl --master-disable

dotfiles_dir="$HOME/.dotfiles"
home_config_dir="$HOME/.config"

echo "link config file"
target_folders=("alacritty" "kitty" "btop")
for folder_name in "${target_folders[@]}"; do
  folder="$dotfiles_dir/config/$folder_name"
  target_folder="$home_config_dir/$folder_name"

  if [ -d "$target_folder" ]; then
    rm -rf "$target_folder"
    echo "Removed existing $target_folder"
  fi

  ln -s "$folder" "$target_folder"
  echo "Created symlink from $folder to $target_folder"
done

# ###########################################################
# Install non-brew various tools (PRE-BREW Installs)
# ###########################################################
if ! xcode-select --print-path &> /dev/null; then
  echo "installing XCode Command Line Tools"
  # Prompt user to install the XCode Command Line Tools
  xcode-select --install &> /dev/null
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if [[ $? != 0 ]]; then
    echo 'XCode Command Line Tools installed'
  else
    echo $? 'XCode Command Line Tools install failed!!!'
  fi
else
  echo "XCode Command Line Tools already installed"
fi

# ###########################################################
# install homebrew (CLI Packages)
# ###########################################################
brew_bin=$(which brew) 2>&1 > /dev/null
if [[ $? != 0 ]]; then
  echo "installing homebrew"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  if [[ $? != 0 ]]; then
    echo "unable to install homebrew, script $0 abort!"
    exit 2
  fi
else
  echo "homebrew already installed"
fi

###########################################################
# Config
###########################################################
for file in "$HOME/.dotfiles/link"/*; do
  if [ -f "$HOME/$file" ]; then
    rm -f "$HOME/$file"
    echo "Removed existing $HOME/$file"
  fi

  if [ -f "$file" ]; then
    filename=$(basename "$file")
    ln -s "$file" "$HOME/$filename"
    echo "Created symlink: $HOME/$filename -> $file"
  fi
done

# Install Homebrew packages
brew bundle install --file $dotfiles_dir/Brewfile

# Change to fish
# chsh -s $(which fish)

# Config git
git config --global core.editor "nvim"
git config --global core.pager "delta"
git config --global core.excludesFile $HOME/.gitignore_global
git config --global core.attributesFile $HOME/.gitattributes_global
git config --global init.defaultbranch "main"
git config --global interactive.difffilter "delta --color-only"
git config --global add.interactive.usebuiltin false
git config --global push.autoSetupRemote true
git config --global merge.conflictstyle diff3
git config --global rerere.enabled true
git config --global column.ui auto
git config --global branch.sort -committerdate
git config --global gpg.format ssh
git config --global user.signingKey ~/.ssh/key.pub
git config --global diff.colormoved default
git config --global diff.tool difftastic
git config --global diff.external difft
git config --global difftool.prompt false
git config --global difftool.difftastic.cmd "difft $LOCAL $REMOTE"
git config --global pager.difftool true
git config --global delta.light false
git config --global delta.navigate true
git config --global delta.side-by-side true
git config --global delta.line-numbers true
git config --global delta.syntax-theme Dracula

# My neovim config
echo "Download neovim config"
git clone https://github.com/BBBoy01/nvim ~/.config/nvim

# Tmux tpm plugin manager
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

# Neovim plugin test framework
luarocks --lua-version=5.1 install vusted

# Init rust
echo $CARGO_HOME $RUSTUP_HOME
rustup-init

# refresh cache
fc-cache -f -v

# Install lts node
pnpm env use -g lts

# pnpm relate
pnpm i -g \
  "vite" \
  "eslint_d" \
  "prettier" \
  "emmet-ls" \
  "typescript" \
  "@vue/language-server" \
  "bash-language-server" \
  "yaml-language-server" \
  "typescript-language-server" \
  "@angular/language-server@15" \
  "@tailwindcss/language-server" \
  "vscode-langservers-extracted" \
  "dockerfile-language-server-nodejs"

# Init yabai
sudo yabai --load-sa
yabai --start-service
skhd --start-service

brew cleanup
brew doctor
echo "All done"
