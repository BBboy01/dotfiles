#!/usr/bin/env bash

# @see https://apple.stackexchange.com/questions/10467/how-to-increase-keyboard-key-repeat-rate-on-os-x
defaults write NSGlobalDomain KeyRepeat -int 2
defaults write NSGlobalDomain InitialKeyRepeat -int 10

dotfiles_dir="$HOME/.dotfiles"
home_config_dir="$HOME/.config"

echo "link config file"
target_folders=("alacritty" "kitty" "btop")
for folder_name in "${target_folders[@]}"; do
  folder="$dotfiles_dir/config/$folder_name"
  target_folder="$home_config_dir/$folder_name"

  if [ -d "$target_folder" ]; then
    rm -rf "$target_folder"
    echo "Removed existing $target_folder"
  fi

  ln -s "$folder" "$target_folder"
  echo "Created symlink from $folder to $target_folder"
done

# ###########################################################
# Install non-brew various tools (PRE-BREW Installs)
# ###########################################################
if ! xcode-select --print-path &> /dev/null; then
  echo "installing XCode Command Line Tools"
  # Prompt user to install the XCode Command Line Tools
  xcode-select --install &> /dev/null
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if [[ $? != 0 ]]; then
    echo 'XCode Command Line Tools installed'
  else
    echo $? 'XCode Command Line Tools install failed!!!'
  fi
else
  echo "XCode Command Line Tools already installed"
fi

# ###########################################################
# install homebrew (CLI Packages)
# ###########################################################
brew_bin=$(which brew) 2>&1 > /dev/null
if [[ $? != 0 ]]; then
  echo "installing homebrew"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  if [[ $? != 0 ]]; then
    echo "unable to install homebrew, script $0 abort!"
    exit 2
  fi
else
  echo "homebrew already installed"
fi

###########################################################
# Config
###########################################################
for file in "$HOME/.dotfiles/link"/*; do
  if [ -f "$HOME/$file" ]; then
    rm -f "$HOME/$file"
    echo "Removed existing $HOME/$file"
  fi

  if [ -f "$file" ]; then
    filename=$(basename "$file")
    ln -s "$file" "$HOME/$filename"
    echo "Created symlink: $HOME/$filename -> $file"
  fi
done

# Install Homebrew packages
brew bundle install --file $dotfiles_dir/Brewfile

# Change to fish
# chsh -s $(which fish)

# Config git
git config --global core.editor "nvim"
git config --global core.pager "delta"
git config --global credential.helper store
git config --global core.excludesFile $HOME/.gitignore_global
git config --global core.attributesFile $HOME/.gitattributes_global
git config --global init.defaultbranch "main"
git config --global interactive.difffilter "delta --color-only"
git config --global add.interactive.usebuiltin false
git config --global delta.light false
git config --global delta.navigate true
git config --global delta.side-by-side true
git config --global delta.line-numbers true
git config --global delta.syntax-theme Dracula
git config --global merge.conflictstyle diff3
git config --global diff.colormoved default
git config --global diff.tool difftastic
git config --global diff.external difft
git config --global difftool.prompt false
git config --global difftool.difftastic.cmd "difft $LOCAL $REMOTE"
git config --global pager.difftool true

# My neovim config
echo "Download neovim config"
git clone https://github.com/BBBoy01/nvim ~/.config/nvim

# Tmux tpm plugin manager
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

# Neovim plugin test framework
luarocks --lua-version=5.1 install vusted

# Init rust
echo $CARGO_HOME $RUSTUP_HOME
rustup-init

# refresh cache
fc-cache -f -v

# Install lts node
pnpm env use -g lts

# pnpm relate
pnpm i -g \
  "vite" \
  "eslint_d" \
  "prettier" \
  "emmet-ls" \
  "typescript" \
  "@vue/language-server" \
  "bash-language-server" \
  "yaml-language-server" \
  "typescript-language-server" \
  "@angular/language-server@15" \
  "@tailwindcss/language-server" \
  "vscode-langservers-extracted" \
  "dockerfile-language-server-nodejs"

# Init yabai
sudo yabai --load-sa
yabai --start-service
skhd --start-service

brew cleanup
brew doctor
echo "All done"
